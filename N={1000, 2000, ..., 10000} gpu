#include "../common/book.h"
#include <stdio.h>
#include <time.h>

#define MAX_N 10000

__global__ void add(int *a, int *b, int *c, int n) {
    int tid = blockIdx.x * blockDim.x + threadIdx.x;
    if (tid < n) {
        c[tid] = a[tid] + b[tid];
    }
}

int main(void) {
    int *a, *b, *c;
    int *dev_a, *dev_b, *dev_c;
    size_t size;

    printf("N, GPU Time (s)\n");

    for (int N = 1000; N <= MAX_N; N += 1000) {
        size = N * sizeof(int);
        a = (int *)malloc(size);
        b = (int *)malloc(size);
        c = (int *)malloc(size);

        for (int i = 0; i < N; i++) {
            a[i] = -i;
            b[i] = i * i;
        }

        HANDLE_ERROR(cudaMalloc((void**)&dev_a, size));
        HANDLE_ERROR(cudaMalloc((void**)&dev_b, size));
        HANDLE_ERROR(cudaMalloc((void**)&dev_c, size));

        HANDLE_ERROR(cudaMemcpy(dev_a, a, size, cudaMemcpyHostToDevice));
        HANDLE_ERROR(cudaMemcpy(dev_b, b, size, cudaMemcpyHostToDevice));

        clock_t start = clock();
        add<<<(N + 255) / 256, 256>>>(dev_a, dev_b, dev_c, N);
        cudaDeviceSynchronize();
        clock_t end = clock();
        double gpu_time = (double)(end - start) / CLOCKS_PER_SEC;

        HANDLE_ERROR(cudaMemcpy(c, dev_c, size, cudaMemcpyDeviceToHost));

        printf("%d, %lf\n", N, gpu_time);

        HANDLE_ERROR(cudaFree(dev_a));
        HANDLE_ERROR(cudaFree(dev_b));
        HANDLE_ERROR(cudaFree(dev_c));
        free(a);
        free(b);
        free(c);
    }

    return 0;
}

