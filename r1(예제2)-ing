# %%writefile r1.cpp

#include <stdio.h>
#include <math.h>
#include <cuda_runtime.h>
#include <cublas_v2.h>

int main() {
    const int n = 5;
    const int rows = n;
    

    double host_A[n*n] = {
      5, 7, 5, 2, 9, 
      2, 3, 3, 1, 3,
      3, 2, 9, -2, 1,
      1, -4, 1, 8, -9,
      -10, 1, 2, 2, 3
      };
    double host_b[n] = {10, 2, 3, -4, 5};
    double host_x[n] = {0, 0, 0, 0, 0}; // x

    double *A, *b, *x, *r, *p, *Axp;
    cudaMalloc((void**)&A, n * n * sizeof(double));
    cudaMalloc((void**)&b, n * sizeof(double));
    cudaMalloc((void**)&x, n * sizeof(double));
    cudaMalloc((void**)&r, n * sizeof(double));
    cudaMalloc((void**)&p, n * sizeof(double));
    cudaMalloc((void**)&Axp, n * sizeof(double));

    cudaMemcpy(A, host_A, n * n * sizeof(double), cudaMemcpyHostToDevice);
    cudaMemcpy(b, host_b, n * sizeof(double), cudaMemcpyHostToDevice);
    cudaMemcpy(x, host_x, n * sizeof(double), cudaMemcpyHostToDevice);

    cublasHandle_t handle;
    cublasCreate(&handle);

    double zero = 0.0, one = 1.0, minusOne = -1.0;
    double alpha = 0.0, beta = 0.0, rxr = 0.0, tmp = 0.0;
    double epsilon = 1e-6;
    int maxit = 1000;

    cublasDcopy(handle, n, b, 1, r, 1); // 초기화: r = b
    cublasDgemv(handle, CUBLAS_OP_N,
                n, n,
                &minusOne,
                A, rows,
                x, 1,
                &one,
                r, 1); // r₀ = b - A * x₀
    cublasDcopy(handle, n, r, 1, p, 1); // p = r
    cublasDdot(handle, n, r, 1, r, 1, &rxr); // rxr = dot(r, r)

    int k = 0;
    while (k < maxit) {

        //1. cublaDgemv() 빈칸 채우기
        cublasDgemv(handle, CUBLAS_OP_N, n, n, &one, A, rows, p, 1, &zero, Axp, 1); // Axp = A * p
        cublasDdot(handle, n, p, 1, Axp, 1, &tmp); // tmp = dot(p, Axp)

        alpha = rxr / tmp; // alpha = rxr / tmp
        cublasDaxpy(handle, n, &alpha, p, 1, x, 1); // x = x + alpha * p
        tmp = -alpha;

        //2. cublaDaxpy() 빈칸 채우기
        cublasDaxpy(handle, n, &tmp, Axp, 1, r, 1); // r = r - alpha * Axp
        cublasDdot(handle, n, r, 1, r, 1, &tmp); // tmp = dot(r, r)

        if (sqrt(tmp) < epsilon)
            break;

        beta = tmp / rxr; // beta = tmp / rxr
        rxr = tmp; // update

        //3.cublaDscal() 빈칸 채우기
        cublasDscal(handle, n, &beta, p, 1); // p = beta * p
        cublasDaxpy(handle, n, &one, r, 1, p, 1); // p = r + p

        k++;
    }

    cudaMemcpy(host_x, x, n * sizeof(double), cudaMemcpyDeviceToHost);
    printf("Approximated Solution x : [%f, %f, %f, %f, %f]\n",host_x[0], host_x[1], host_x[2],host_x[3],host_x[4]);

    cudaFree(A);
    cudaFree(b);
    cudaFree(x);
    cudaFree(r);
    cudaFree(p);
    cudaFree(Axp);
    cublasDestroy(handle);

    return 0;
}

